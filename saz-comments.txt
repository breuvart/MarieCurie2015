* If the audience is broader than just computer scientists, I would
  add a bit of general motivation about the need for improved software
  verification.  

  - software is becoming increasingly critical (autonomous vehicles, Internet, etc.)
  - bugs and security vulnerabilities are costly
  - type systems are a scalable way to analyze software
  - "graded type systems" will improve the state-of-the-art by including more information in the types


* I like the idea of using contraints drawn from an algebraic structure.  This seems like doing some kind of "symbolic" abstract interpretation.

* You should be sure to include a description of how you intend to evaluate the results of your work.  I would suggest:

  - metatheory:  proving that the graded type system is sound w.r.t some semantics
  - expressiveness: pick a good goal example program and property that you'd like to be able to typecheck with the system

* Related to the above: You should include (as much as possible) a
  concrete example of the informativeness of a graded type (and
  perhaps compare it to a standard type for the same program).


* You should (probably briefly, depending on space) compare against potential related work.  You touch on dependently typed languages, but there are other kinds of refinment types, etc.


* There are numerous English errors that I'm happy to help correct in a future pass through the proposal.
